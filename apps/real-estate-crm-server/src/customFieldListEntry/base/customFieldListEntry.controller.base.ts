/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomFieldListEntryService } from "../customFieldListEntry.service";
import { CustomFieldListEntryCreateInput } from "./CustomFieldListEntryCreateInput";
import { CustomFieldListEntry } from "./CustomFieldListEntry";
import { CustomFieldListEntryFindManyArgs } from "./CustomFieldListEntryFindManyArgs";
import { CustomFieldListEntryWhereUniqueInput } from "./CustomFieldListEntryWhereUniqueInput";
import { CustomFieldListEntryUpdateInput } from "./CustomFieldListEntryUpdateInput";

export class CustomFieldListEntryControllerBase {
  constructor(protected readonly service: CustomFieldListEntryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CustomFieldListEntry })
  async createCustomFieldListEntry(
    @common.Body() data: CustomFieldListEntryCreateInput
  ): Promise<CustomFieldListEntry> {
    return await this.service.createCustomFieldListEntry({
      data: data,
      select: {
        createdAt: true,
        id: true,
        listEntry: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CustomFieldListEntry] })
  @ApiNestedQuery(CustomFieldListEntryFindManyArgs)
  async customFieldListEntries(
    @common.Req() request: Request
  ): Promise<CustomFieldListEntry[]> {
    const args = plainToClass(CustomFieldListEntryFindManyArgs, request.query);
    return this.service.customFieldListEntries({
      ...args,
      select: {
        createdAt: true,
        id: true,
        listEntry: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CustomFieldListEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customFieldListEntry(
    @common.Param() params: CustomFieldListEntryWhereUniqueInput
  ): Promise<CustomFieldListEntry | null> {
    const result = await this.service.customFieldListEntry({
      where: params,
      select: {
        createdAt: true,
        id: true,
        listEntry: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CustomFieldListEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCustomFieldListEntry(
    @common.Param() params: CustomFieldListEntryWhereUniqueInput,
    @common.Body() data: CustomFieldListEntryUpdateInput
  ): Promise<CustomFieldListEntry | null> {
    try {
      return await this.service.updateCustomFieldListEntry({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          listEntry: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CustomFieldListEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomFieldListEntry(
    @common.Param() params: CustomFieldListEntryWhereUniqueInput
  ): Promise<CustomFieldListEntry | null> {
    try {
      return await this.service.deleteCustomFieldListEntry({
        where: params,
        select: {
          createdAt: true,
          id: true,
          listEntry: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
