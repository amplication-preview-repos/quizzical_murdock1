/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CustomFieldListEntry } from "./CustomFieldListEntry";
import { CustomFieldListEntryCountArgs } from "./CustomFieldListEntryCountArgs";
import { CustomFieldListEntryFindManyArgs } from "./CustomFieldListEntryFindManyArgs";
import { CustomFieldListEntryFindUniqueArgs } from "./CustomFieldListEntryFindUniqueArgs";
import { CreateCustomFieldListEntryArgs } from "./CreateCustomFieldListEntryArgs";
import { UpdateCustomFieldListEntryArgs } from "./UpdateCustomFieldListEntryArgs";
import { DeleteCustomFieldListEntryArgs } from "./DeleteCustomFieldListEntryArgs";
import { CustomFieldListEntryService } from "../customFieldListEntry.service";
@graphql.Resolver(() => CustomFieldListEntry)
export class CustomFieldListEntryResolverBase {
  constructor(protected readonly service: CustomFieldListEntryService) {}

  async _customFieldListEntriesMeta(
    @graphql.Args() args: CustomFieldListEntryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CustomFieldListEntry])
  async customFieldListEntries(
    @graphql.Args() args: CustomFieldListEntryFindManyArgs
  ): Promise<CustomFieldListEntry[]> {
    return this.service.customFieldListEntries(args);
  }

  @graphql.Query(() => CustomFieldListEntry, { nullable: true })
  async customFieldListEntry(
    @graphql.Args() args: CustomFieldListEntryFindUniqueArgs
  ): Promise<CustomFieldListEntry | null> {
    const result = await this.service.customFieldListEntry(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CustomFieldListEntry)
  async createCustomFieldListEntry(
    @graphql.Args() args: CreateCustomFieldListEntryArgs
  ): Promise<CustomFieldListEntry> {
    return await this.service.createCustomFieldListEntry({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CustomFieldListEntry)
  async updateCustomFieldListEntry(
    @graphql.Args() args: UpdateCustomFieldListEntryArgs
  ): Promise<CustomFieldListEntry | null> {
    try {
      return await this.service.updateCustomFieldListEntry({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomFieldListEntry)
  async deleteCustomFieldListEntry(
    @graphql.Args() args: DeleteCustomFieldListEntryArgs
  ): Promise<CustomFieldListEntry | null> {
    try {
      return await this.service.deleteCustomFieldListEntry(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
