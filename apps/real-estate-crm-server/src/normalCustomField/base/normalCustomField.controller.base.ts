/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NormalCustomFieldService } from "../normalCustomField.service";
import { NormalCustomFieldCreateInput } from "./NormalCustomFieldCreateInput";
import { NormalCustomField } from "./NormalCustomField";
import { NormalCustomFieldFindManyArgs } from "./NormalCustomFieldFindManyArgs";
import { NormalCustomFieldWhereUniqueInput } from "./NormalCustomFieldWhereUniqueInput";
import { NormalCustomFieldUpdateInput } from "./NormalCustomFieldUpdateInput";

export class NormalCustomFieldControllerBase {
  constructor(protected readonly service: NormalCustomFieldService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NormalCustomField })
  async createNormalCustomField(
    @common.Body() data: NormalCustomFieldCreateInput
  ): Promise<NormalCustomField> {
    return await this.service.createNormalCustomField({
      data: {
        ...data,

        property: data.property
          ? {
              connect: data.property,
            }
          : undefined,
      },
      select: {
        content: true,
        createdAt: true,
        id: true,
        label: true,

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [NormalCustomField] })
  @ApiNestedQuery(NormalCustomFieldFindManyArgs)
  async normalCustomFields(
    @common.Req() request: Request
  ): Promise<NormalCustomField[]> {
    const args = plainToClass(NormalCustomFieldFindManyArgs, request.query);
    return this.service.normalCustomFields({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,
        label: true,

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NormalCustomField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async normalCustomField(
    @common.Param() params: NormalCustomFieldWhereUniqueInput
  ): Promise<NormalCustomField | null> {
    const result = await this.service.normalCustomField({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,
        label: true,

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NormalCustomField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNormalCustomField(
    @common.Param() params: NormalCustomFieldWhereUniqueInput,
    @common.Body() data: NormalCustomFieldUpdateInput
  ): Promise<NormalCustomField | null> {
    try {
      return await this.service.updateNormalCustomField({
        where: params,
        data: {
          ...data,

          property: data.property
            ? {
                connect: data.property,
              }
            : undefined,
        },
        select: {
          content: true,
          createdAt: true,
          id: true,
          label: true,

          property: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NormalCustomField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNormalCustomField(
    @common.Param() params: NormalCustomFieldWhereUniqueInput
  ): Promise<NormalCustomField | null> {
    try {
      return await this.service.deleteNormalCustomField({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,
          label: true,

          property: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
