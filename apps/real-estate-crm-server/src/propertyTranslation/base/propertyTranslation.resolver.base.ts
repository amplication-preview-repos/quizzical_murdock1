/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PropertyTranslation } from "./PropertyTranslation";
import { PropertyTranslationCountArgs } from "./PropertyTranslationCountArgs";
import { PropertyTranslationFindManyArgs } from "./PropertyTranslationFindManyArgs";
import { PropertyTranslationFindUniqueArgs } from "./PropertyTranslationFindUniqueArgs";
import { CreatePropertyTranslationArgs } from "./CreatePropertyTranslationArgs";
import { UpdatePropertyTranslationArgs } from "./UpdatePropertyTranslationArgs";
import { DeletePropertyTranslationArgs } from "./DeletePropertyTranslationArgs";
import { Locale } from "../../locale/base/Locale";
import { Property } from "../../property/base/Property";
import { PropertyTranslationService } from "../propertyTranslation.service";
@graphql.Resolver(() => PropertyTranslation)
export class PropertyTranslationResolverBase {
  constructor(protected readonly service: PropertyTranslationService) {}

  async _propertyTranslationsMeta(
    @graphql.Args() args: PropertyTranslationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PropertyTranslation])
  async propertyTranslations(
    @graphql.Args() args: PropertyTranslationFindManyArgs
  ): Promise<PropertyTranslation[]> {
    return this.service.propertyTranslations(args);
  }

  @graphql.Query(() => PropertyTranslation, { nullable: true })
  async propertyTranslation(
    @graphql.Args() args: PropertyTranslationFindUniqueArgs
  ): Promise<PropertyTranslation | null> {
    const result = await this.service.propertyTranslation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PropertyTranslation)
  async createPropertyTranslation(
    @graphql.Args() args: CreatePropertyTranslationArgs
  ): Promise<PropertyTranslation> {
    return await this.service.createPropertyTranslation({
      ...args,
      data: {
        ...args.data,

        locale: args.data.locale
          ? {
              connect: args.data.locale,
            }
          : undefined,

        property: args.data.property
          ? {
              connect: args.data.property,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PropertyTranslation)
  async updatePropertyTranslation(
    @graphql.Args() args: UpdatePropertyTranslationArgs
  ): Promise<PropertyTranslation | null> {
    try {
      return await this.service.updatePropertyTranslation({
        ...args,
        data: {
          ...args.data,

          locale: args.data.locale
            ? {
                connect: args.data.locale,
              }
            : undefined,

          property: args.data.property
            ? {
                connect: args.data.property,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PropertyTranslation)
  async deletePropertyTranslation(
    @graphql.Args() args: DeletePropertyTranslationArgs
  ): Promise<PropertyTranslation | null> {
    try {
      return await this.service.deletePropertyTranslation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Locale, {
    nullable: true,
    name: "locale",
  })
  async getLocale(
    @graphql.Parent() parent: PropertyTranslation
  ): Promise<Locale | null> {
    const result = await this.service.getLocale(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Property, {
    nullable: true,
    name: "property",
  })
  async getProperty(
    @graphql.Parent() parent: PropertyTranslation
  ): Promise<Property | null> {
    const result = await this.service.getProperty(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
