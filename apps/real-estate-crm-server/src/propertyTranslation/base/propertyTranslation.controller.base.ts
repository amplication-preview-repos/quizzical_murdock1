/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PropertyTranslationService } from "../propertyTranslation.service";
import { PropertyTranslationCreateInput } from "./PropertyTranslationCreateInput";
import { PropertyTranslation } from "./PropertyTranslation";
import { PropertyTranslationFindManyArgs } from "./PropertyTranslationFindManyArgs";
import { PropertyTranslationWhereUniqueInput } from "./PropertyTranslationWhereUniqueInput";
import { PropertyTranslationUpdateInput } from "./PropertyTranslationUpdateInput";

export class PropertyTranslationControllerBase {
  constructor(protected readonly service: PropertyTranslationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PropertyTranslation })
  async createPropertyTranslation(
    @common.Body() data: PropertyTranslationCreateInput
  ): Promise<PropertyTranslation> {
    return await this.service.createPropertyTranslation({
      data: {
        ...data,

        locale: data.locale
          ? {
              connect: data.locale,
            }
          : undefined,

        property: data.property
          ? {
              connect: data.property,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        id: true,

        locale: {
          select: {
            id: true,
          },
        },

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PropertyTranslation] })
  @ApiNestedQuery(PropertyTranslationFindManyArgs)
  async propertyTranslations(
    @common.Req() request: Request
  ): Promise<PropertyTranslation[]> {
    const args = plainToClass(PropertyTranslationFindManyArgs, request.query);
    return this.service.propertyTranslations({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,

        locale: {
          select: {
            id: true,
          },
        },

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PropertyTranslation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async propertyTranslation(
    @common.Param() params: PropertyTranslationWhereUniqueInput
  ): Promise<PropertyTranslation | null> {
    const result = await this.service.propertyTranslation({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,

        locale: {
          select: {
            id: true,
          },
        },

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PropertyTranslation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePropertyTranslation(
    @common.Param() params: PropertyTranslationWhereUniqueInput,
    @common.Body() data: PropertyTranslationUpdateInput
  ): Promise<PropertyTranslation | null> {
    try {
      return await this.service.updatePropertyTranslation({
        where: params,
        data: {
          ...data,

          locale: data.locale
            ? {
                connect: data.locale,
              }
            : undefined,

          property: data.property
            ? {
                connect: data.property,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          id: true,

          locale: {
            select: {
              id: true,
            },
          },

          property: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PropertyTranslation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePropertyTranslation(
    @common.Param() params: PropertyTranslationWhereUniqueInput
  ): Promise<PropertyTranslation | null> {
    try {
      return await this.service.deletePropertyTranslation({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,

          locale: {
            select: {
              id: true,
            },
          },

          property: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
