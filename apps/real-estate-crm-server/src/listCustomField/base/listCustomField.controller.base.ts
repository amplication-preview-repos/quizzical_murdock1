/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ListCustomFieldService } from "../listCustomField.service";
import { ListCustomFieldCreateInput } from "./ListCustomFieldCreateInput";
import { ListCustomField } from "./ListCustomField";
import { ListCustomFieldFindManyArgs } from "./ListCustomFieldFindManyArgs";
import { ListCustomFieldWhereUniqueInput } from "./ListCustomFieldWhereUniqueInput";
import { ListCustomFieldUpdateInput } from "./ListCustomFieldUpdateInput";

export class ListCustomFieldControllerBase {
  constructor(protected readonly service: ListCustomFieldService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ListCustomField })
  async createListCustomField(
    @common.Body() data: ListCustomFieldCreateInput
  ): Promise<ListCustomField> {
    return await this.service.createListCustomField({
      data: {
        ...data,

        property: data.property
          ? {
              connect: data.property,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        label: true,

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ListCustomField] })
  @ApiNestedQuery(ListCustomFieldFindManyArgs)
  async listCustomFields(
    @common.Req() request: Request
  ): Promise<ListCustomField[]> {
    const args = plainToClass(ListCustomFieldFindManyArgs, request.query);
    return this.service.listCustomFields({
      ...args,
      select: {
        createdAt: true,
        id: true,
        label: true,

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ListCustomField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async listCustomField(
    @common.Param() params: ListCustomFieldWhereUniqueInput
  ): Promise<ListCustomField | null> {
    const result = await this.service.listCustomField({
      where: params,
      select: {
        createdAt: true,
        id: true,
        label: true,

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ListCustomField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateListCustomField(
    @common.Param() params: ListCustomFieldWhereUniqueInput,
    @common.Body() data: ListCustomFieldUpdateInput
  ): Promise<ListCustomField | null> {
    try {
      return await this.service.updateListCustomField({
        where: params,
        data: {
          ...data,

          property: data.property
            ? {
                connect: data.property,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          label: true,

          property: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ListCustomField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteListCustomField(
    @common.Param() params: ListCustomFieldWhereUniqueInput
  ): Promise<ListCustomField | null> {
    try {
      return await this.service.deleteListCustomField({
        where: params,
        select: {
          createdAt: true,
          id: true,
          label: true,

          property: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
