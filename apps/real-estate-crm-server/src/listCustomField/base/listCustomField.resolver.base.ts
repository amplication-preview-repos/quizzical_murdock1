/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ListCustomField } from "./ListCustomField";
import { ListCustomFieldCountArgs } from "./ListCustomFieldCountArgs";
import { ListCustomFieldFindManyArgs } from "./ListCustomFieldFindManyArgs";
import { ListCustomFieldFindUniqueArgs } from "./ListCustomFieldFindUniqueArgs";
import { CreateListCustomFieldArgs } from "./CreateListCustomFieldArgs";
import { UpdateListCustomFieldArgs } from "./UpdateListCustomFieldArgs";
import { DeleteListCustomFieldArgs } from "./DeleteListCustomFieldArgs";
import { Property } from "../../property/base/Property";
import { ListCustomFieldService } from "../listCustomField.service";
@graphql.Resolver(() => ListCustomField)
export class ListCustomFieldResolverBase {
  constructor(protected readonly service: ListCustomFieldService) {}

  async _listCustomFieldsMeta(
    @graphql.Args() args: ListCustomFieldCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ListCustomField])
  async listCustomFields(
    @graphql.Args() args: ListCustomFieldFindManyArgs
  ): Promise<ListCustomField[]> {
    return this.service.listCustomFields(args);
  }

  @graphql.Query(() => ListCustomField, { nullable: true })
  async listCustomField(
    @graphql.Args() args: ListCustomFieldFindUniqueArgs
  ): Promise<ListCustomField | null> {
    const result = await this.service.listCustomField(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ListCustomField)
  async createListCustomField(
    @graphql.Args() args: CreateListCustomFieldArgs
  ): Promise<ListCustomField> {
    return await this.service.createListCustomField({
      ...args,
      data: {
        ...args.data,

        property: args.data.property
          ? {
              connect: args.data.property,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ListCustomField)
  async updateListCustomField(
    @graphql.Args() args: UpdateListCustomFieldArgs
  ): Promise<ListCustomField | null> {
    try {
      return await this.service.updateListCustomField({
        ...args,
        data: {
          ...args.data,

          property: args.data.property
            ? {
                connect: args.data.property,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ListCustomField)
  async deleteListCustomField(
    @graphql.Args() args: DeleteListCustomFieldArgs
  ): Promise<ListCustomField | null> {
    try {
      return await this.service.deleteListCustomField(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Property, {
    nullable: true,
    name: "property",
  })
  async getProperty(
    @graphql.Parent() parent: ListCustomField
  ): Promise<Property | null> {
    const result = await this.service.getProperty(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
