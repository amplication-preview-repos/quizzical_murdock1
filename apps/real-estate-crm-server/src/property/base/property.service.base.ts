/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Property as PrismaProperty,
  Appointment as PrismaAppointment,
  ImageCustomField as PrismaImageCustomField,
  ListCustomField as PrismaListCustomField,
  NormalCustomField as PrismaNormalCustomField,
  PropertyTranslation as PrismaPropertyTranslation,
} from "@prisma/client";

export class PropertyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PropertyCountArgs, "select">): Promise<number> {
    return this.prisma.property.count(args);
  }

  async properties(
    args: Prisma.PropertyFindManyArgs
  ): Promise<PrismaProperty[]> {
    return this.prisma.property.findMany(args);
  }
  async property(
    args: Prisma.PropertyFindUniqueArgs
  ): Promise<PrismaProperty | null> {
    return this.prisma.property.findUnique(args);
  }
  async createProperty(
    args: Prisma.PropertyCreateArgs
  ): Promise<PrismaProperty> {
    return this.prisma.property.create(args);
  }
  async updateProperty(
    args: Prisma.PropertyUpdateArgs
  ): Promise<PrismaProperty> {
    return this.prisma.property.update(args);
  }
  async deleteProperty(
    args: Prisma.PropertyDeleteArgs
  ): Promise<PrismaProperty> {
    return this.prisma.property.delete(args);
  }

  async findAppointments(
    parentId: string,
    args: Prisma.AppointmentFindManyArgs
  ): Promise<PrismaAppointment[]> {
    return this.prisma.property
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .appointments(args);
  }

  async findImageCustomFields(
    parentId: string,
    args: Prisma.ImageCustomFieldFindManyArgs
  ): Promise<PrismaImageCustomField[]> {
    return this.prisma.property
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .imageCustomFields(args);
  }

  async findListCustomFields(
    parentId: string,
    args: Prisma.ListCustomFieldFindManyArgs
  ): Promise<PrismaListCustomField[]> {
    return this.prisma.property
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .listCustomFields(args);
  }

  async findNormalCustomFields(
    parentId: string,
    args: Prisma.NormalCustomFieldFindManyArgs
  ): Promise<PrismaNormalCustomField[]> {
    return this.prisma.property
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .normalCustomFields(args);
  }

  async findPropertyTranslations(
    parentId: string,
    args: Prisma.PropertyTranslationFindManyArgs
  ): Promise<PrismaPropertyTranslation[]> {
    return this.prisma.property
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .propertyTranslations(args);
  }
}
