/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ImageCustomField } from "./ImageCustomField";
import { ImageCustomFieldCountArgs } from "./ImageCustomFieldCountArgs";
import { ImageCustomFieldFindManyArgs } from "./ImageCustomFieldFindManyArgs";
import { ImageCustomFieldFindUniqueArgs } from "./ImageCustomFieldFindUniqueArgs";
import { CreateImageCustomFieldArgs } from "./CreateImageCustomFieldArgs";
import { UpdateImageCustomFieldArgs } from "./UpdateImageCustomFieldArgs";
import { DeleteImageCustomFieldArgs } from "./DeleteImageCustomFieldArgs";
import { Property } from "../../property/base/Property";
import { ImageCustomFieldService } from "../imageCustomField.service";
@graphql.Resolver(() => ImageCustomField)
export class ImageCustomFieldResolverBase {
  constructor(protected readonly service: ImageCustomFieldService) {}

  async _imageCustomFieldsMeta(
    @graphql.Args() args: ImageCustomFieldCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ImageCustomField])
  async imageCustomFields(
    @graphql.Args() args: ImageCustomFieldFindManyArgs
  ): Promise<ImageCustomField[]> {
    return this.service.imageCustomFields(args);
  }

  @graphql.Query(() => ImageCustomField, { nullable: true })
  async imageCustomField(
    @graphql.Args() args: ImageCustomFieldFindUniqueArgs
  ): Promise<ImageCustomField | null> {
    const result = await this.service.imageCustomField(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ImageCustomField)
  async createImageCustomField(
    @graphql.Args() args: CreateImageCustomFieldArgs
  ): Promise<ImageCustomField> {
    return await this.service.createImageCustomField({
      ...args,
      data: {
        ...args.data,

        property: args.data.property
          ? {
              connect: args.data.property,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ImageCustomField)
  async updateImageCustomField(
    @graphql.Args() args: UpdateImageCustomFieldArgs
  ): Promise<ImageCustomField | null> {
    try {
      return await this.service.updateImageCustomField({
        ...args,
        data: {
          ...args.data,

          property: args.data.property
            ? {
                connect: args.data.property,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ImageCustomField)
  async deleteImageCustomField(
    @graphql.Args() args: DeleteImageCustomFieldArgs
  ): Promise<ImageCustomField | null> {
    try {
      return await this.service.deleteImageCustomField(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Property, {
    nullable: true,
    name: "property",
  })
  async getProperty(
    @graphql.Parent() parent: ImageCustomField
  ): Promise<Property | null> {
    const result = await this.service.getProperty(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
