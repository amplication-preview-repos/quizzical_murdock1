/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ImageCustomFieldService } from "../imageCustomField.service";
import { ImageCustomFieldCreateInput } from "./ImageCustomFieldCreateInput";
import { ImageCustomField } from "./ImageCustomField";
import { ImageCustomFieldFindManyArgs } from "./ImageCustomFieldFindManyArgs";
import { ImageCustomFieldWhereUniqueInput } from "./ImageCustomFieldWhereUniqueInput";
import { ImageCustomFieldUpdateInput } from "./ImageCustomFieldUpdateInput";

export class ImageCustomFieldControllerBase {
  constructor(protected readonly service: ImageCustomFieldService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ImageCustomField })
  async createImageCustomField(
    @common.Body() data: ImageCustomFieldCreateInput
  ): Promise<ImageCustomField> {
    return await this.service.createImageCustomField({
      data: {
        ...data,

        property: data.property
          ? {
              connect: data.property,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        image: true,

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ImageCustomField] })
  @ApiNestedQuery(ImageCustomFieldFindManyArgs)
  async imageCustomFields(
    @common.Req() request: Request
  ): Promise<ImageCustomField[]> {
    const args = plainToClass(ImageCustomFieldFindManyArgs, request.query);
    return this.service.imageCustomFields({
      ...args,
      select: {
        createdAt: true,
        id: true,
        image: true,

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ImageCustomField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async imageCustomField(
    @common.Param() params: ImageCustomFieldWhereUniqueInput
  ): Promise<ImageCustomField | null> {
    const result = await this.service.imageCustomField({
      where: params,
      select: {
        createdAt: true,
        id: true,
        image: true,

        property: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ImageCustomField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateImageCustomField(
    @common.Param() params: ImageCustomFieldWhereUniqueInput,
    @common.Body() data: ImageCustomFieldUpdateInput
  ): Promise<ImageCustomField | null> {
    try {
      return await this.service.updateImageCustomField({
        where: params,
        data: {
          ...data,

          property: data.property
            ? {
                connect: data.property,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          image: true,

          property: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ImageCustomField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteImageCustomField(
    @common.Param() params: ImageCustomFieldWhereUniqueInput
  ): Promise<ImageCustomField | null> {
    try {
      return await this.service.deleteImageCustomField({
        where: params,
        select: {
          createdAt: true,
          id: true,
          image: true,

          property: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
